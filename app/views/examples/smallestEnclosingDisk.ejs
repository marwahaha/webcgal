<!DOCTYPE html>
<html>
<head>
    <% include ../partials/templates/head.ejs %>
    <% include ../partials/templates/jsdefaults.ejs %>
    <script src="/static/js/nerdamer/nerdamer.core.js"></script>
    <script src="/static/js/nerdamer/Algebra.js"></script>
    <script src="/static/js/nerdamer/Calculus.js"></script>
    <script src="/static/js/nerdamer/Solve.js"></script>
</head>

<body>

<div id="nav">
    <% include ../partials/templates/navigation.ejs %>
</div>
    <article>

        <p>This page is adapted the algorithm from a book Computational Geometry - Algorithms and Applications, 3rd Ed by Berg et. al.  You can see details in chapter 4.7 Smallest Enclosing Discs.      </p>

<div class="paperscript split">
<div class="canvas up">
    <canvas width="900px" height="400px" id="canvas-1"></canvas>
</div>
<div class="buttons">
<div class="button run">Source</div>
</div>

<script type="text/paperscript" canvas="canvas-1">
<% include ../partials/paperjs/all.js %>
<% include ../partials/paperjs/circle.js %>
<% include ../partials/paperjs/Functions.js %>


////////////////////////////     event handling  /////////////////////////////

function onMouseDown(event) {

    clearDrawables();
    var p = new Point(event.point.x, view.size.height - event.point.y);
    mouseDown(p);
}

function mouseDown(point){  // my mouse down function prototype

}

////////////////////////////     Visual Part      ////////////////////////////

function drawCircle(circle){
    drawables.push(new Path.Circle({ name: 'circle', center: circle.center, radius: circle.r, strokeColor: 'black'}));
}

//end-script
////////////////////// Smallest Disk Functions  //////////////////////////
function miniDisc(points){
    var ps = shuffle(points);
    var lastCircle = getCenterAndRadius2(ps[0].pos, ps[1].pos);

    for(i=2; i<ps.length; i++)
        if(inCircle(lastCircle.center, lastCircle.r, ps[i].pos) > 0)
            lastCircle = miniDiscWithPoint(ps.slice(0, i), ps[i])

    drawCircle(lastCircle);
}

function miniDiscWithPoint(points, q){
    var ps = shuffle(points);
    var lastCircle = getCenterAndRadius2(ps[0].pos, q.pos);

    for(j=1; j<ps.length; j++)
        if(inCircle(lastCircle.center, lastCircle.r, ps[j].pos) > 0)
            lastCircle = miniDiscWitTwoPoints(ps.slice(0, j), ps[j], q)

    return lastCircle;
}

function miniDiscWitTwoPoints(points, q1, q2){
    var lastCircle = getCenterAndRadius2(q1.pos, q2.pos);

    for(k=0; k<points.length; k++)
        if(inCircle(lastCircle.center, lastCircle.r, points[k].pos) > 0)
            lastCircle = getCenterAndRadius3(q1.pos, q2.pos, points[k].pos);

    return lastCircle;
}

var points = Points.createRandom(7);
miniDisc(points);

function mouseDown(point){

    points.push(new TextPoint(point));
    miniDisc(points)

    Points.drawPoints(points);
}


</script>

</div>
</article>
<% include ../partials/paperjs/pre_defined_polygons.svg %>

    </body>
</html>

