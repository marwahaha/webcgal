<!DOCTYPE html>
<html>
<head>
    <% include ../partials/templates/head.ejs %>
    <% include ../partials/templates/jsdefaults.ejs %>

        <style>

.palette {
    -webkit-column-count: 2; /* Chrome, Safari, Opera */
    -moz-column-count: 2; /* Firefox */
    column-count: 2;
    -webkit-column-gap: 10px; /* Chrome, Safari, Opera */
    -moz-column-gap: 10px; /* Firefox */
    column-gap: 10px;
   // -webkit-column-rule-style: solid; /* Chrome, Safari, Opera */
   // -moz-column-rule-style: solid; /* Firefox */
  //  column-rule-style: solid;
}

        canvas { border: 2px solid black; }

    </style>
</head>
<body>

<div id="nav">
    <% include ../partials/templates/navigation.ejs %>
</div>

<article>

<div class="paperscript">
<div class="buttons">
<div class="button run">Source</div>
</div>
<script type="text/paperscript" canvas="canvas-1">
var myPath = [];
var points = [];

colors = ['red', 'blue', 'yellow', 'magenta', 'green'];

var booleanStyle = {
strokeColor: new Color(0, 0, 0),
strokeWidth: 1.5
};

var drawables = [];

var segment, path;
var hitOptions = {segments: true, fill: true, stroke:true, tolerance: 15};

function onMouseMove(event) {
project.activeLayer.selected = false;
if (event.item)
{
    if(event.item.name == 'polygon')
    {
        event.item.bringToFront()
        //event.item.selected = true;
    }
}
}

function onMouseDown(event) {

segment = path = null;

var hitResult = project.hitTest(event.point, hitOptions);
if (hitResult){
    path = hitResult.item;
    if (hitResult.type == 'segment')
       segment = hitResult.segment
}

 if (event.modifiers.control) { // if control is pressed add new point
    myPath.add(event.point);
    refreshPoints();
}
}

function onMouseDrag(event) {
if (segment)
    segment.point += event.delta;
else if (path)
    path.position += event.delta;

refreshPoints();
}

function onMouseUp(event) {
if (event.modifiers.shift) {
    myPath.closed = true;
}
}

///////////////////////////////   vector processes   ///////////////////////////////////////

function dotProduct(v1, v2){
return v1.x * v2.x + v1.y * v2.y;
}

function crossProduct(v1, v2){
return v1.x * v2.y - v2.x * v1.y;
}

//////////////////////////////////////  Classes  ////////////////////////////////////////////

function PolygonPoint(p){

this.point = p;
this.type = ''; // convex, concave

this.v1; //incident vector1;
this.v2; //incident vector2;

drawables.push(new PointText({ point: p  +[5, -5], fontSize: '16px', fillColor: 'black', content: ' '+ k}));
};

function Pie(origin, from, through, to){

if (typeof Pie.counter == 'undefined')
    Pie.counter = -1;

this.id = Pie.counter++; // newly created vertex will have different id
this.through = through;

var arc = drawArc(origin, from, through, to);
var pol = drawLines(origin, from, to);

var un = arc.unite(pol); // they must be "closed path" for any boolean operation

un.style = booleanStyle
un.fillColor = colors[Pie.counter];
un.fillColor.alpha = 0.4;

this.path = un;
};

/////////////////////////////////////     Visual Part      //////////////////////////////////
function clear()
{
for(i=0; i<drawables.length; i++) // it is for lines, circles, texts etc.
    drawables[i].remove();

Pie.counter = -1;
}

function drawArc(origin, from, through, to){
var curve = new Path.Arc({from: origin + from, through: origin + through, to: origin + to, dashArray: [1,2] });
curve.closed = true;
return curve;
}

function drawLines(origin, v1, v2){
var innerPart = new Path({dashArray: [1,2]});
innerPart.add(origin);
innerPart.add(origin + v1);
innerPart.add(origin + v2);
innerPart.closed = true;

return innerPart;
}

function refreshPoints(){
clear();

var seg = myPath.segments;

points = [];
var str = "";
for(k=0; k < seg.length; k++)
    points.push(new PolygonPoint(seg[k].point));

window.calculate();

var counter = 0;
for(i=0; i<points.length; i++)
{
    if(points[i].type == -1)
    {
        drawables.push(new Path.Circle({ name: 'vertice-'+i, center: points[i].point, radius: 7, fillColor: colors[counter], strokeColor: colors[counter]}));
        counter++;
    }
    else
        drawables.push(new Path.Circle({ name: 'vertice-'+i, center: points[i].point, radius: 5, fillColor: 'black', strokeColor:'#000000'}));
}
drawLineDirections();
}

function createPolygon(){
myPath = new Path({name: 'polygon', fillColor: 'white', strokeColor: 'black', strokeWidth: 2});
//var polygons =  [[432.5,100],[481.5,242],[417.5,375],[267.5,331],[128.5,190],[200.5,90],[288.5,53]];
//var polygons = [[401.5,104],[450.5,246],[386.5,379],[236.5,335],[97.5,194],[287.5,222],[257.5,57]];
var polygons = [[350.5,104],[300.5,231],[326.5,359],[236.5,335],[37.5,194],[141.5,181],[257.5,57]];

for(k=0; k < polygons.length; k++)
    myPath.add(new Point(polygons[k]));

myPath.closed = true;
}

////////////////////////////////////////    Main   //////////////////////////////////////////

var canvas = document.getElementById('myCanvas');
createPolygon(); // first create polygon, then modify by dragging

window.calculate = function(){

for(i=0; i<points.length; i++)
{
    var dir = 0;
    var vector1, vector2;

    if(i == 0){
        vector1 = points[points.length -1].point - points[0].point;
        vector2 = points[0].point - points[1].point;
    }
    else if(i >= 1 && i < points.length -1){
        vector1 = points[i-1].point - points[i].point;
        vector2 = points[i].point - points[i+1].point;
    }
    else if(i == points.length -1){
        vector1 = points[points.length -2].point - points[points.length -1].point;
        vector2 = points[points.length -1].point - points[0].point;
    }

    dir = crossProduct(vector1, vector2);

    points[i].v1 = vector1.normalize();
    points[i].v2 = -vector2.normalize();

    if(dir < 0)
        points[i].type = -1;
    else
        points[i].type = +1;
}
}

function onFrame(event){}

// it is on another scope
function drawLineDirections(){

var scope = new paper.PaperScope();
var canvas_2 = document.getElementById('canvas-2');
scope.setup(canvas_2)
canvas_2.width = 400;
canvas_2.height = 480;

var pies = []; // stores each pie

var origin = new Point(160, 120);
var pie_size = 100; // radius of each pie

for(i=0; i<points.length; i++)
{
    if (points[i].type == -1)  // point creates concavity
    {
        var from = points[i].v1 * (pie_size + i); // make it a little bit different by adding i
        var to = points[i].v2 * (pie_size + i);
        var angle = ((points[i].v1 + points[i].v2)/2).angle;
        var through =  new Point({length: (pie_size + i), angle: angle})

        if(pies.length > 0)
        {
            if(dotProduct(pies[0].through, through) < 0 )
            {
                through = -through;
                from = -from;
                to = -to;
            }
        }
        pies.push(new Pie(origin, from, through, to))
    }
}

if(pies.length == 0)
{
    new PointText({ point: [20, 360], fontSize: '24px', fillColor: 'black', content: 'All orientations are valid!'})
    scope.view.draw();
    return;
}

var intersectPath;

if(pies.length >= 1)
    intersectPath = pies[0].path;

for(i=1; i<pies.length ;i++)
    intersectPath = intersectPath.intersect(pies[i].path)

if(intersectPath.segments.length == 0)
    new PointText({ point: [60, 360], fontSize: '36px', fillColor: 'black', content: 'No valid line!'})

intersectPath.translate([0,230])
intersectPath.fillColor = 'green';

scope.view.draw();
}
//end-script///////////////////////////////////////////////////////////////////////////////////////

refreshPoints();

window.getPolypolygonPoints = function(){

var seg = myPath.segments;
var str = ""
for(k=0; k < seg.length; k++)
    str += "["+seg[k].point.x+"," +seg[k].point.y+"],"
console.info(str)
}
</script>

    <div class="palette">
        <h2>Polygon Points for L-monoton</h2>
        <div class="canvas">
            <canvas width="380px" height="480px" id="canvas-1"></canvas>
        </div>

        <h2>Available line direction</h2>
        <div class="canvas">
            <canvas width="380px" height="480px" id="canvas-2"></canvas>
        </div>
    </div>
</div>

    <style>
    i{
        font-size: 1.1em;
        color:brown;
        //font-weight: bold;
     }
    </style>

    <section id="features">
    <h2>What is being monotone for a polygon?</h2>
    <p>A simple polygon is called <i> monotone with respect to a line l</i> if for any line <i>l'</i> perpendicular to <i>l</i> the intersection of the polygon with <i>l'</i> is connected. In other words, the intersection should be a line segment, a point, or empty. A polygon that is monotone with respect to the y-axis is called <i> y-monotone</i>. The
following property is characteristic for y-monotone polygons: if we walk from a topmost to a bottommost vertex along the left (or the right) boundary chain, then we always move downwards or horizontally, never upwards.</p>

    <p>
    This application shows available line orientation which makes a polygon monoton. Left you can modify position of the polygon points. Points which make polygon concave will appear as colored, others are black.
</p>

    <p>
You will immediately see resulting line orientation at the right pane. At the right pane, above figure shows inner angle of concave points and below is their intersection.
    </p>
    </section>
</article>

</body>
</html>

<script src="/reload/reload.js"></script>
