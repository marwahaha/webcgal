<!DOCTYPE html>
<html>
<head>

<meta charset="UTF-8"/>
<meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"/>
<meta name="apple-mobile-web-app-capable" content="yes"/>
<meta name="apple-touch-fullscreen" content="yes"/>
<meta name="msapplication-tap-highlight" content="no"/>    

<% include partials/templates/headpaper.ejs %>
<% include partials/templates/jsdefaults.ejs %> 

</head>
<body>

<div id="nav">
<% include partials/templates/navigation.ejs %>
</div>
  
<article>       
    
    <h2> Home </h2>        
<section id="description" class="first">
    <p><strong>WebCgal</strong> is a web tool and abreviation of <strong>Web</strong> of <strong>C</strong>omputer <strong>G</strong>eometry <strong>Al</strong>gorithms. It is  specialized to ease understanding computer geometry algorithms. Main features of the website are:
        
  <ul>
      <li>It is written on <strong>javascript language</strong> and works on almost every web browser. (platform independent)</li>
      <li>You can see how algorithms work on <strong>live animation</strong>. </li>
      <li>You can <strong>modify</strong> codes on live. Therefore, you can try your own algorithm.</li>
   </ul>
    
    <p> This computer geometry programmings are actually for learning the idea behind the algorithm visually. WebCgal uses mainly <a href="http://paperjs.org/" target="_blank">paper.js</a> javascript library and you can refer to it for reference. 
    </p>
    
    <p>
        Below you can see an interactive demo of the intersection of web site logo (text) and a circle. You can see its code by clicking upper right of the animation. You can simply edit and run your code. See the paperJs <a href="http://paperjs.org/tutorials/">tutorial</a> and <a href="http://paperjs.org/reference/">reference</a> for editing. 
    </p>
    
</section>

<div class="paperscript">
    <div class="buttons">
        <div class="button run">Source</div>
    </div>
        
<script  type="text/paperscript" canvas="canvas-1">
//end-script
var cc = new Path.Circle({radius: 80, strokeColor: 'black' })

var cgal = project.importSVG(document.getElementById("svg_cgal"));
cgal.style = {fillColor: 'white', strokeColor: 'red', strokeWidth: 1}
cgal.position = new Point(200, 130)

var web = project.importSVG(document.getElementById("svg_web"));
web.style = {fillColor: 'white', strokeColor: 'black', strokeWidth: 1}
web.position = [275, 30]
web.scale(0.3)

var garbage = [];

function showIntersectionArea(path, color){
    var w = cc.intersect(path)
    w.fillColor = color  
    w.bringToFront();
    garbage.push(w)
}

function onFrame(event){
    var offset = new Point(100, 50) * [Math.sin(event.count / 30), Math.sin(event.count / 40)];
    cc.position = new Point(200, 100) + offset;

    for(var i=0; i<garbage.length; i++) // Remove the result of the last path operation:
       garbage[i].remove()    

    for(var jc=0; jc<cgal.children.length; jc++)
    {
        var intersections = cc.getIntersections(cgal.children[jc]);

        for (var k = 0; k < intersections.length; k++)
            garbage.push(new Path.Circle({ center: intersections[k].point, radius: 5, strokeColor: 'black' }))      

        showIntersectionArea(cgal.children[jc], 'red');
    }

    for(var iw=0; iw<web.children.length; iw++)
        showIntersectionArea(web.children[iw], 'black');

}
    
</script>
    
<script>    
    var downloadAsSVG = function (fileName) {

   if(!fileName) {
       fileName = "paperjs_example.svg"
   }

   var url = "data:image/svg+xml;utf8," + encodeURIComponent(paper.project.exportSVG({asString:true}));

   var link = document.createElement("a");
   link.download = fileName;
   link.href = url;
   link.click();
}

    window.save = function(){
        downloadAsSVG('logo.svg')    
    }
</script>
    
  <div class="canvas">
    <canvas width="400px" height="240px" id="canvas-1"></canvas>
</div>  
</div>
        
<!--<button type="button" class="btn btn-link" onclick="save()">save</button>  -->
        
       
<section id="features">
  <h2>Features</h2>
  <ul>
    <li>Support for <a href="http://codemirror.net/mode/index.html">over 100 languages</a> out of the box
 </li></ul>
</section>
      
<section id=browsersupport>
  <h2>Browser support</h2>
WebCgal is aimed at modern browsers with support for the Canvas object and EcmaScript 5. 
  <p>Support for modern mobile browsers is experimental. Recent versions of the iOS browser and Chrome on Android should work pretty well.</p>
</section>        
        
    </article>
    
<% include ../public/images/webcgal.svg %> 
    
</body>
</html>

<script src="/reload/reload.js"></script>

